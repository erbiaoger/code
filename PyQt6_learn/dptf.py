import numpy as np
import h5py
import scipy.io as io
import os
import copy
import pickle
import tensorflow as tf
from pickPoint import pickPoint


class MyGPR():
    def __init__(self):
        self.freq = None
        self.velo = None
        self.spec = None
        self.fMax = None
        self.fMin = None
        self.cMax = None
        self.cMin = None
        self.name = None
        self.model = None
        self.point = []

        self.previous = {}
        self.previous_redo = {}
        self.history = []
    
    def initPrevious(self, previous=None):
        '''
        Initialization of data strucure that contains the step 
        before the most recent action.
        '''
        if previous == None:
            self.previous["freq"] = self.freq
            self.previous["velo"] = self.velo
            self.previous["spec"] = self.spec
            self.previous["fMax"] = self.fMax
            self.previous["fMin"] = self.fMin
            self.previous["cMax"] = self.cMax
            self.previous["cMin"] = self.cMin
            self.previous["name"] = self.name

            histsav = self.history.copy()
            self.previous["history"] = histsav
        elif previous == 'undo':
            self.freq = self.previous["freq"]
            self.velo = self.previous["velo"]
            self.spec = self.previous["spec"]
            self.fMax = self.previous["fMax"]
            self.fMin = self.previous["fMin"]
            self.cMax = self.previous["cMax"]
            self.cMin = self.previous["cMin"]
            self.name = self.previous["name"]
           
            # Make sure to not keep deleting history
            # when applying undo several times. 
            histsav = self.previous["history"].copy()
            del histsav[-1]
            self.history = histsav
        elif previous == 'redo_undo':
            self.previous_redo["freq"] = self.freq
            self.previous_redo["velo"] = self.velo
            self.previous_redo["spec"] = self.spec
            self.previous_redo["fMax"] = self.fMax
            self.previous_redo["fMin"] = self.fMin
            self.previous_redo["cMax"] = self.cMax
            self.previous_redo["cMin"] = self.cMin
            self.previous_redo["name"] = self.name

            histsav = self.history.copy()
            self.previous_redo["history"] = histsav
        elif previous == 'redo': 
            self.freq = self.previous_redo["freq"]
            self.velo = self.previous_redo["velo"]
            self.spec = self.previous_redo["spec"]
            self.fMax = self.previous_redo["fMax"]
            self.fMin = self.previous_redo["fMin"]
            self.cMax = self.previous_redo["cMax"]
            self.cMin = self.previous_redo["cMin"]
            self.name = self.previous_redo["name"]

            histsav = self.previous_redo["history"].copy()
            del histsav[-1]
            self.history = histsav

    def undo(self):
        '''
        Undoes the last processing step and removes that step fromt he history.
        '''
        self.initPrevious('redo_undo')
        self.initPrevious('undo')

        print("undo")

    def redo(self):
        '''
        Redoes the last processing step and adds that step to the history.
        '''
        self.initPrevious('redo')
        print("redo")

    def showHistory(self):
        '''
        Prints out processing and visualization history of a data set. 
        '''
        for i in range(0,len(self.history)):
            print(self.history[i])

    def writeHistory(self,outfilename="myhistory.py"):
        '''
        Turns the processing and visualization history into a Python script.
        The full path names are saved in the Python script. You can edit the
        Python script after saving to remove the full path names.

        INPUT:
        outfilename        filename for Python script
        '''
        with open(outfilename,"w") as outfile:
            outfile.write("# Automatically generated by GPRPy\nimport gprpy.gprpy as gp\n")
            for i in range(0,len(self.history)):
                outfile.write(self.history[i] + "\n")

    def importData(self, fname=None):
        """
        Import data from file

        Parameters:
        -----------
        fname : str

        Returns:
        --------
        self.data : array
            Data from file
        """
        fname, fext = os.path.splitext(fname)
        if fname is not None:
            if fext == ".h5":
                with h5py.File(fname+fext, 'r') as fr:
                    spec = np.array(fr['ds'])
                    # 	Preprocessing
                    self.spec = np.flipud(spec)

                    self.freq = np.array(fr['f'])
                    self.velo = np.array(fr['c'])
                    self.fMax = max(self.freq)
                    self.fMin = min(self.freq)
                    self.cMax = max(self.velo)
                    self.cMin = min(self.velo)
                    self.name = fname.split('/')[-1]

                    self.initPrevious()

                    # Put what you did in history
                    histstr = "mygpr.importdata('%s')" %(fname)
                    self.history.append(histstr)
    
        else:
            print("可读取 2A 2B dt1, DT1, hd, HD, DZT, dat, GPRhdr, rad, rd3, rd7, and gpr 文件.", '\n')

    def saveData(self, fname=None):
        """
        Save data to file

        Parameters:
        -----------
        fname : str

        Returns:
        --------
        self.data : array
            Data from file
        """
        fname, fext = os.path.splitext(fname)
        if fname is not None:
            ## Getting back the objects:
            with open(fname+".gpr", 'wb') as f:
                pickle.dump([self.data, self.info, self.profilePos, 
                                self.twtt, self.history, self.antsep, self.velocity, 
                                self.depth, self.maxTopo, self.minTopo, self.threeD, 
                                self.data_pretopo, self.twtt_pretopo], f)
        else:
            print("可保存 gpr 文件.", '\n')

        # Add to history string
        histstr = "mygpr.save('%s')" %(fname)
        self.history.append(histstr)

    def importModel(self, fname=None):
        if fname is not None:
            self.model = tf.keras.models.load_model(fname)
            
            histstr = "mygpr.importdata('%s')" %(fname)
            self.history.append(histstr)

        else:
            print("可读取 2A 2B dt1, DT1, hd, HD, DZT, dat, GPRhdr, rad, rd3, rd7, and gpr 文件.", '\n')

    def pickPoint(self, threshold=0.5, searchStep=5, returnSpec=False):
        """
        Pick point from data set

        Parameters:
        -----------
        threshold : float
            Threshold value to pick point
        searchStep : int
            Search step size
        returnSpec : bool
            Return spectrum

        Returns:
        --------
        point : array
            Picked point
        """
        self.point = pickPoint(self.model, self.spec, threshold, self.freq, self.velo, searchStep, returnSpec)

  